/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models

/**
 * This entity is a root level object. It represents a Message. It is serialized in JSON and saved in the underlying CouchDB database.
 *
 * @param id The ID of the message. We encourage using either a v4 UUID or a HL7 Id.
 * @param tags A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.
 * @param codes A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
 * @param recipients List of IDs of healthcare parties to whom the message is addressed
 * @param toAddresses The address of the recipient of the message. Format is of an email address with extra domains defined for mycarenet and ehealth: (efact.mycarenet.be/eattest.mycarenet.be/chapter4.mycarenet.be/ehbox.ehealth.fgov.be)
 * @param metas
 * @param readStatus Status showing whether the message is read or not and the time of reading
 * @param invoiceIds Set of IDs for invoices in the message
 * @param unassignedResults
 * @param assignedResults
 * @param senderReferences
 * @param secretForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.
 * @param cryptedForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.
 * @param delegations When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well
 * @param encryptionKeys When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation
 * @param rev The revision of the message in the database, used for conflict management / optimistic locking.
 * @param created The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param modified The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param author The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param responsible The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param medicalLocationId The id of the medical location where this entity was created.
 * @param endOfLife Soft delete (unix epoch in ms) timestamp of the object.
 * @param deletionDate hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.
 * @param fromAddress Address of the sender of the message
 * @param fromHealthcarePartyId ID of the healthcare party sending the message
 * @param formId
 * @param status Status of the message
 * @param recipientsType The type of user who is the recipient of this message
 * @param received The timestamp (unix epoch in ms) when the message was received
 * @param sent The timestamp (unix epoch in ms) when the message was sent
 * @param transportGuid
 * @param remark
 * @param conversationGuid
 * @param subject Subject for the message
 * @param parentId ID of a parent in a message conversation
 * @param externalRef
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 */

data class MessageDto (

    /* The ID of the message. We encourage using either a v4 UUID or a HL7 Id. */

    val id: kotlin.String,

    /* A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags. */

    val tags: kotlin.collections.List<CodeStubDto> = emptyList(),

    /* A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes */

    val codes: kotlin.collections.List<CodeStubDto> = emptyList(),

    /* List of IDs of healthcare parties to whom the message is addressed */

    val recipients: kotlin.collections.List<kotlin.String> = emptyList(),

    /* The address of the recipient of the message. Format is of an email address with extra domains defined for mycarenet and ehealth: (efact.mycarenet.be/eattest.mycarenet.be/chapter4.mycarenet.be/ehbox.ehealth.fgov.be) */

    val toAddresses: kotlin.collections.List<kotlin.String> = emptyList(),


    val metas: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),

    /* Status showing whether the message is read or not and the time of reading */

    val readStatus: kotlin.collections.Map<kotlin.String, MessageReadStatusDto> = emptyMap(),

    /* Set of IDs for invoices in the message */

    val invoiceIds: kotlin.collections.List<kotlin.String> = emptyList(),


    val unassignedResults: kotlin.collections.List<kotlin.String> = emptyList(),


    val assignedResults: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),


    val senderReferences: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),

    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space. */

    val secretForeignKeys: kotlin.collections.List<kotlin.String> = emptyList(),

    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys. */

    val cryptedForeignKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>> = emptyMap(),

    /* When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well */

    val delegations: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>> = emptyMap(),

    /* When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation */

    val encryptionKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>> = emptyMap(),

    /* The revision of the message in the database, used for conflict management / optimistic locking. */

    val rev: kotlin.String? = null,

    /* The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server. */

    val created: kotlin.Long? = null,

    /* The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server. */

    val modified: kotlin.Long? = null,

    /* The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server. */

    val author: kotlin.String? = null,

    /* The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server. */

    val responsible: kotlin.String? = null,

    /* The id of the medical location where this entity was created. */

    val medicalLocationId: kotlin.String? = null,

    /* Soft delete (unix epoch in ms) timestamp of the object. */

    val endOfLife: kotlin.Long? = null,

    /* hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called. */

    val deletionDate: kotlin.Long? = null,

    /* Address of the sender of the message */

    val fromAddress: kotlin.String? = null,

    /* ID of the healthcare party sending the message */

    val fromHealthcarePartyId: kotlin.String? = null,


    val formId: kotlin.String? = null,

    /* Status of the message */

    val status: kotlin.Int? = null,

    /* The type of user who is the recipient of this message */

    val recipientsType: kotlin.String? = null,

    /* The timestamp (unix epoch in ms) when the message was received */

    val received: kotlin.Long? = null,

    /* The timestamp (unix epoch in ms) when the message was sent */

    val sent: kotlin.Long? = null,


    val transportGuid: kotlin.String? = null,


    val remark: kotlin.String? = null,


    val conversationGuid: kotlin.String? = null,

    /* Subject for the message */

    val subject: kotlin.String? = null,

    /* ID of a parent in a message conversation */

    val parentId: kotlin.String? = null,


    val externalRef: kotlin.String? = null,

    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */

    val encryptedSelf: kotlin.String? = null

)

