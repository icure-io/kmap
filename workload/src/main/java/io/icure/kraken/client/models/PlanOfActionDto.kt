/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models

/**
 * List of healthcare approaches.
 *
 * @param id
 * @param tags A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.
 * @param codes A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
 * @param status bit 0: active/inactive, bit 1: relevant/irrelevant, bit 2 : present/absent, ex: 0 = active,relevant and present
 * @param documentIds
 * @param careTeamMemberships Members of the careteam involved in this approach
 * @param relevant
 * @param created The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param modified The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param author The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param responsible The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param medicalLocationId The id of the medical location where this entity was created.
 * @param endOfLife Soft delete (unix epoch in ms) timestamp of the object.
 * @param prescriberId The id of the hcp who prescribed this healthcare approach
 * @param valueDate The date (unix epoch in ms) when the healthcare approach is noted to have started and also closes on the same date
 * @param openingDate The date (unix epoch in ms) of the start of the healthcare approach.
 * @param closingDate The date (unix epoch in ms) marking the end of the healthcare approach.
 * @param deadlineDate The date (unix epoch in ms) when the healthcare approach has to be carried out.
 * @param name The name of the healthcare approach.
 * @param descr Description of the healthcare approach.
 * @param note Note about the healthcare approach.
 * @param idOpeningContact Id of the opening contact when the healthcare approach was created.
 * @param idClosingContact Id of the closing contact for the healthcare approach.
 * @param numberOfCares The number of individual cares already performed in the course of this healthcare approach
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 */

data class PlanOfActionDto (


    val id: kotlin.String,

    /* A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags. */

    val tags: kotlin.collections.List<CodeStubDto> = emptyList(),

    /* A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes */

    val codes: kotlin.collections.List<CodeStubDto> = emptyList(),

    /* bit 0: active/inactive, bit 1: relevant/irrelevant, bit 2 : present/absent, ex: 0 = active,relevant and present */

    val status: kotlin.Int = 0,


    @Deprecated(message = "This property is deprecated.")
    val documentIds: kotlin.collections.List<kotlin.String> = emptyList(),

    /* Members of the careteam involved in this approach */

    val careTeamMemberships: kotlin.collections.List<CareTeamMembershipDto> = emptyList(),


    @Deprecated(message = "This property is deprecated.")
    val relevant: kotlin.Boolean = true,

    /* The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server. */

    val created: kotlin.Long? = null,

    /* The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server. */

    val modified: kotlin.Long? = null,

    /* The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server. */

    val author: kotlin.String? = null,

    /* The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server. */

    val responsible: kotlin.String? = null,

    /* The id of the medical location where this entity was created. */

    val medicalLocationId: kotlin.String? = null,

    /* Soft delete (unix epoch in ms) timestamp of the object. */

    val endOfLife: kotlin.Long? = null,

    /* The id of the hcp who prescribed this healthcare approach */

    val prescriberId: kotlin.String? = null,

    /* The date (unix epoch in ms) when the healthcare approach is noted to have started and also closes on the same date */

    val valueDate: kotlin.Long? = null,

    /* The date (unix epoch in ms) of the start of the healthcare approach. */

    val openingDate: kotlin.Long? = null,

    /* The date (unix epoch in ms) marking the end of the healthcare approach. */

    val closingDate: kotlin.Long? = null,

    /* The date (unix epoch in ms) when the healthcare approach has to be carried out. */

    val deadlineDate: kotlin.Long? = null,

    /* The name of the healthcare approach. */

    val name: kotlin.String? = null,

    /* Description of the healthcare approach. */

    val descr: kotlin.String? = null,

    /* Note about the healthcare approach. */

    val note: kotlin.String? = null,

    /* Id of the opening contact when the healthcare approach was created. */

    val idOpeningContact: kotlin.String? = null,

    /* Id of the closing contact for the healthcare approach. */

    val idClosingContact: kotlin.String? = null,

    /* The number of individual cares already performed in the course of this healthcare approach */

    @Deprecated(message = "This property is deprecated.")
    val numberOfCares: kotlin.Int? = null,

    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */

    val encryptedSelf: kotlin.String? = null

)

