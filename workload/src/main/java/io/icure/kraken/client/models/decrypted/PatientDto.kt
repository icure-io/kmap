/**
 * iCure Cloud API Documentation
 *
 * Spring shop sample application
 *
 * The version of the OpenAPI document: v0.0.1
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models.decrypted

import io.icure.kraken.client.models.AddressDto
import io.icure.kraken.client.models.CodeStubDto
import io.icure.kraken.client.models.DelegationDto
import io.icure.kraken.client.models.EmploymentInfoDto
import io.icure.kraken.client.models.FinancialInstitutionInformationDto
import io.icure.kraken.client.models.IdentifierDto
import io.icure.kraken.client.models.InsurabilityDto
import io.icure.kraken.client.models.MedicalHouseContractDto
import io.icure.kraken.client.models.PartnershipDto
import io.icure.kraken.client.models.PatientHealthCarePartyDto
import io.icure.kraken.client.models.PersonNameDto
import io.icure.kraken.client.models.PropertyStubDto
import io.icure.kraken.client.models.SchoolingInfoDto

/**
 * This entity is a root level object. It represents a patient It is serialized in JSON and saved in the underlying icure-patient CouchDB database.
 *
 * @param id the Id of the patient. We encourage using either a v4 UUID or a HL7 Id.
 * @param identifier
 * @param tags A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags.
 * @param codes A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes
 * @param languages the list of languages spoken by the patient ordered by fluency (alpha-2 code http://www.loc.gov/standards/iso639-2/ascii_8bits.html).
 * @param addresses the list of addresses (with address type).
 * @param mergedIds The ids of the patients that have been merged inside this patient.
 * @param active Is the patient active (boolean).
 * @param deactivationReason When not active, the reason for deactivation.
 * @param insurabilities List of insurance coverages (of class Insurability, see below).
 * @param partnerships List of partners, or persons of contact (of class Partnership, see below).
 * @param patientHealthCareParties Links (usually for therapeutic reasons) between this patient and healthcare parties (of class PatientHealthcareParty).
 * @param financialInstitutionInformation Financial information (Bank, bank account) used to reimburse the patient.
 * @param medicalHouseContracts Contracts between the patient and the healthcare entity.
 * @param patientProfessions Codified list of professions exercised by this patient.
 * @param parameters Extra parameters
 * @param properties Extra properties
 * @param hcPartyKeys For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself.
 * @param privateKeyShamirPartitions The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"thresholdâŽ®partition in hex\" encrypted using the the partition's holder's public RSA key
 * @param secretForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space.
 * @param cryptedForeignKeys The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys.
 * @param delegations When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well
 * @param encryptionKeys When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation
 * @param nonDuplicateIds
 * @param encryptedAdministrativesDocuments
 * @param schoolingInfos
 * @param employementInfos
 * @param rev the revision of the patient in the database, used for conflict management / optimistic locking.
 * @param created The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param modified The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param author The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param responsible The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server.
 * @param endOfLife Soft delete (unix epoch in ms) timestamp of the object.
 * @param deletionDate hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called.
 * @param firstName the firstname (name) of the patient.
 * @param lastName the lastname (surname) of the patient. This is the official lastname that should be used for official administrative purposes.
 * @param companyName the name of the company this patient is member of.
 * @param civility Mr., Ms., Pr., Dr. ...
 * @param gender the gender of the patient: male, female, indeterminate, changed, changedToMale, changedToFemale, unknown
 * @param birthSex the birth sex of the patient: male, female, indeterminate, unknown
 * @param mergeToPatientId The id of the patient this patient has been merged with.
 * @param alias An alias of the person, nickname, ...
 * @param ssin Social security inscription number.
 * @param maidenName Lastname at birth (can be different of the current name), depending on the country, must be used to design the patient .
 * @param spouseName Lastname of the spouse for a married woman, depending on the country, can be used to design the patient.
 * @param partnerName Lastname of the partner, should not be used to design the patient.
 * @param personalStatus any of `single`, `in_couple`, `married`, `separated`, `divorced`, `divorcing`, `widowed`, `widower`, `complicated`, `unknown`, `contract`, `other`.
 * @param dateOfBirth The birthdate encoded as a fuzzy date on 8 positions (YYYYMMDD) MM and/or DD can be set to 00 if unknown (19740000 is a valid date).
 * @param dateOfDeath The date of death encoded as a fuzzy date on 8 positions (YYYYMMDD) MM and/or DD can be set to 00 if unknown (19740000 is a valid date).
 * @param timestampOfLatestEidReading Timestamp of the latest validation of the eID of the person..
 * @param placeOfBirth The place of birth.
 * @param placeOfDeath The place of death.
 * @param deceased Is the patient deceased.
 * @param education The level of education (college degree, undergraduate, phd).
 * @param profession The current professional activity.
 * @param note A text note (can be confidential, encrypted by default).
 * @param administrativeNote An administrative note, not confidential.
 * @param nationality The nationality of the patient.
 * @param race The race of the patient.
 * @param ethnicity The ethnicity of the patient.
 * @param preferredUserId The id of the user that usually handles this patient.
 * @param picture A picture usually saved in JPEG format.
 * @param externalId An external (from another source) id with no guarantee or requirement for unicity .
 * @param publicKey The public key of this hcp
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 * @param medicalLocationId The id of the medical location where this entity was created.
 * @param comment
 * @param warning
 * @param fatherBirthCountry
 * @param birthCountry
 * @param nativeCountry
 * @param socialStatus
 * @param mainSourceOfIncome
 */

data class PatientDto (

    /* the Id of the patient. We encourage using either a v4 UUID or a HL7 Id. */

    val id: kotlin.String,


    val identifier: kotlin.collections.List<IdentifierDto> = emptyList(),

    /* A tag is an item from a codification system that qualifies an entity as being member of a certain class, whatever the value it might have taken. If the tag qualifies the content of a field, it means that whatever the content of the field, the tag will always apply. For example, the label of a field is qualified using a tag. LOINC is a codification system typically used for tags. */

    val tags: kotlin.collections.List<CodeStubDto> = emptyList(),

    /* A code is an item from a codification system that qualifies the content of this entity. SNOMED-CT, ICPC-2 or ICD-10 codifications systems can be used for codes */

    val codes: kotlin.collections.List<CodeStubDto> = emptyList(),

    /* the list of all names of the patient, also containing the official full name information. Ordered by preference of use. First element is therefore the official name used for the patient in the application */

    val names: kotlin.collections.List<PersonNameDto> = emptyList(),

    /* the list of languages spoken by the patient ordered by fluency (alpha-2 code http://www.loc.gov/standards/iso639-2/ascii_8bits.html). */

    val languages: kotlin.collections.List<kotlin.String> = emptyList(),

    /* the list of addresses (with address type). */

    val addresses: kotlin.collections.List<AddressDto> = emptyList(),

    /* The ids of the patients that have been merged inside this patient. */

    val mergedIds: kotlin.collections.List<kotlin.String> = emptyList(),

    /* Is the patient active (boolean). */

    val active: kotlin.Boolean = true,

    /* When not active, the reason for deactivation. */

    val deactivationReason: PatientDto.DeactivationReason = DeactivationReason.none,

    /* List of insurance coverages (of class Insurability, see below). */

    val insurabilities: kotlin.collections.List<InsurabilityDto> = emptyList(),

    /* List of partners, or persons of contact (of class Partnership, see below). */

    val partnerships: kotlin.collections.List<PartnershipDto> = emptyList(),

    /* Links (usually for therapeutic reasons) between this patient and healthcare parties (of class PatientHealthcareParty). */

    val patientHealthCareParties: kotlin.collections.List<PatientHealthCarePartyDto> = emptyList(),

    /* Financial information (Bank, bank account) used to reimburse the patient. */

    val financialInstitutionInformation: kotlin.collections.List<FinancialInstitutionInformationDto> = emptyList(),

    /* Contracts between the patient and the healthcare entity. */

    val medicalHouseContracts: kotlin.collections.List<MedicalHouseContractDto> = emptyList(),

    /* Codified list of professions exercised by this patient. */

    val patientProfessions: kotlin.collections.List<CodeStubDto> = emptyList(),

    /* Extra parameters */

    val parameters: kotlin.collections.Map<kotlin.String, kotlin.collections.List<kotlin.String>> = emptyMap(),

    /* Extra properties */

    val properties: kotlin.collections.List<PropertyStubDto> = emptyList(),

    /* For each couple of HcParties (delegator and delegate), this map contains the exchange AES key. The delegator is always this hcp, the key of the map is the id of the delegate. The AES exchange key is encrypted using RSA twice : once using this hcp public key (index 0 in the Array) and once using the other hcp public key (index 1 in the Array). For a pair of HcParties. Each HcParty always has one AES exchange key for himself. */

    val hcPartyKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.List<kotlin.String>> = emptyMap(),

    /* Extra AES exchange keys, usually the ones we lost access to at some point. The structure is { publicKey: { delegateId: [aesExKey_for_this, aesExKey_for_delegate] } } */

    val aesExchangeKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Map<kotlin.String, kotlin.collections.List<kotlin.String>>> = emptyMap(),

    /* Our private keys encrypted with our public keys. The structure is { publicKey1: { publicKey2: privateKey2_encrypted_with_publicKey1, publicKey3: privateKey3_encrypted_with_publicKey1 } } */

    val transferKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Map<kotlin.String, kotlin.String>> = emptyMap(),

    /* The hcparty keys (first of the pair) for which we are asking a re-encryption by the delegate using our new publicKey. */

    val lostHcPartyKeys: kotlin.collections.List<kotlin.String> = emptyList(),

    /* The privateKeyShamirPartitions are used to share this hcp's private RSA key with a series of other hcParties using Shamir's algorithm. The key of the map is the hcp Id with whom this partition has been shared. The value is \"thresholdâŽ®partition in hex\" encrypted using the the partition's holder's public RSA key */

    val privateKeyShamirPartitions: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),

    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find all contacts for a specific patient. These keys are in clear. You can have several to partition the medical document space. */

    val secretForeignKeys: kotlin.collections.List<kotlin.String> = emptyList(),

    /* The secretForeignKeys are filled at the to many end of a one to many relationship (for example inside Contact for the Patient -> Contacts relationship). Used when we want to find the patient for a specific contact. These keys are the encrypted id (using the hcParty key for the delegate) that can be found in clear inside the patient. ids encrypted using the hcParty keys. */

    val cryptedForeignKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>> = emptyMap(),

    /* When a document is created, the responsible generates a cryptographically random master key (never to be used for something else than referencing from other entities). He/she encrypts it using his own AES exchange key and stores it as a delegation. The responsible is thus always in the delegations as well */

    val delegations: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>> = emptyMap(),

    /* When a document needs to be encrypted, the responsible generates a cryptographically random master key (different from the delegation key, never to appear in clear anywhere in the db. He/she encrypts it using his own AES exchange key and stores it as a delegation */

    val encryptionKeys: kotlin.collections.Map<kotlin.String, kotlin.collections.Set<DelegationDto>> = emptyMap(),


    @Deprecated(message = "This property is deprecated.")
    val nonDuplicateIds: kotlin.collections.List<kotlin.String> = emptyList(),


    @Deprecated(message = "This property is deprecated.")
    val encryptedAdministrativesDocuments: kotlin.collections.List<kotlin.String> = emptyList(),


    @Deprecated(message = "This property is deprecated.")
    val schoolingInfos: kotlin.collections.List<SchoolingInfoDto> = emptyList(),


    @Deprecated(message = "This property is deprecated.")
    val employementInfos: kotlin.collections.List<EmploymentInfoDto> = emptyList(),

    /* the revision of the patient in the database, used for conflict management / optimistic locking. */

    val rev: kotlin.String? = null,

    /* The timestamp (unix epoch in ms) of creation of this entity, will be filled automatically if missing. Not enforced by the application server. */

    val created: kotlin.Long? = null,

    /* The date (unix epoch in ms) of the latest modification of this entity, will be filled automatically if missing. Not enforced by the application server. */

    val modified: kotlin.Long? = null,

    /* The id of the User that has created this entity, will be filled automatically if missing. Not enforced by the application server. */

    val author: kotlin.String? = null,

    /* The id of the HealthcareParty that is responsible for this entity, will be filled automatically if missing. Not enforced by the application server. */

    val responsible: kotlin.String? = null,

    /* Soft delete (unix epoch in ms) timestamp of the object. */

    val endOfLife: kotlin.Long? = null,

    /* hard delete (unix epoch in ms) timestamp of the object. Filled automatically when deletePatient is called. */

    val deletionDate: kotlin.Long? = null,

    /* the firstname (name) of the patient. */

    val firstName: kotlin.String? = null,

    /* the lastname (surname) of the patient. This is the official lastname that should be used for official administrative purposes. */

    val lastName: kotlin.String? = null,

    /* the name of the company this patient is member of. */

    val companyName: kotlin.String? = null,

    /* Mr., Ms., Pr., Dr. ... */

    val civility: kotlin.String? = null,

    /* the gender of the patient: male, female, indeterminate, changed, changedToMale, changedToFemale, unknown */

    val gender: PatientDto.Gender? = null,

    /* the birth sex of the patient: male, female, indeterminate, unknown */

    val birthSex: PatientDto.BirthSex? = null,

    /* The id of the patient this patient has been merged with. */

    val mergeToPatientId: kotlin.String? = null,

    /* An alias of the person, nickname, ... */

    val alias: kotlin.String? = null,

    /* Social security inscription number. */

    val ssin: kotlin.String? = null,

    /* Lastname at birth (can be different of the current name), depending on the country, must be used to design the patient . */

    val maidenName: kotlin.String? = null,

    /* Lastname of the spouse for a married woman, depending on the country, can be used to design the patient. */

    val spouseName: kotlin.String? = null,

    /* Lastname of the partner, should not be used to design the patient. */

    val partnerName: kotlin.String? = null,

    /* any of `single`, `in_couple`, `married`, `separated`, `divorced`, `divorcing`, `widowed`, `widower`, `complicated`, `unknown`, `contract`, `other`. */

    val personalStatus: PatientDto.PersonalStatus? = null,

    /* The birthdate encoded as a fuzzy date on 8 positions (YYYYMMDD) MM and/or DD can be set to 00 if unknown (19740000 is a valid date). */

    val dateOfBirth: kotlin.Int? = null,

    /* The date of death encoded as a fuzzy date on 8 positions (YYYYMMDD) MM and/or DD can be set to 00 if unknown (19740000 is a valid date). */

    val dateOfDeath: kotlin.Int? = null,

    /* Timestamp of the latest validation of the eID of the person.. */

    val timestampOfLatestEidReading: kotlin.Long? = null,

    /* The place of birth. */

    val placeOfBirth: kotlin.String? = null,

    /* The place of death. */

    val placeOfDeath: kotlin.String? = null,

    /* Is the patient deceased. */

    val deceased: kotlin.Boolean? = null,

    /* The level of education (college degree, undergraduate, phd). */

    val education: kotlin.String? = null,

    /* The current professional activity. */

    val profession: kotlin.String? = null,

    /* A text note (can be confidential, encrypted by default). */

    val note: kotlin.String? = null,

    /* An administrative note, not confidential. */

    val administrativeNote: kotlin.String? = null,

    /* The nationality of the patient. */

    val nationality: kotlin.String? = null,

    /* The race of the patient. */

    val race: kotlin.String? = null,

    /* The ethnicity of the patient. */

    val ethnicity: kotlin.String? = null,

    /* The id of the user that usually handles this patient. */

    val preferredUserId: kotlin.String? = null,

    /* A picture usually saved in JPEG format. */

    val picture: ByteArray? = null,

    /* An external (from another source) id with no guarantee or requirement for unicity . */

    val externalId: kotlin.String? = null,

    /* The public key of this hcp */

    val publicKey: kotlin.String? = null,

    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */

    val encryptedSelf: kotlin.String? = null,

    /* The id of the medical location where this entity was created. */

    val medicalLocationId: kotlin.String? = null,


    @Deprecated(message = "This property is deprecated.")
    val comment: kotlin.String? = null,


    @Deprecated(message = "This property is deprecated.")
    val warning: kotlin.String? = null,


    val fatherBirthCountry: CodeStubDto? = null,


    val birthCountry: CodeStubDto? = null,


    val nativeCountry: CodeStubDto? = null,


    val socialStatus: CodeStubDto? = null,


    val mainSourceOfIncome: CodeStubDto? = null

) {

    /**
     * When not active, the reason for deactivation.
     *
     * Values: deceased,moved,otherDoctor,retired,noContact,unknown,none
     */
    enum class DeactivationReason(val value: kotlin.String) {
        deceased("deceased"),
        moved("moved"),
        otherDoctor("other_doctor"),
        retired("retired"),
        noContact("no_contact"),
        unknown("unknown"),
        none("none");
    }
    /**
     * the gender of the patient: male, female, indeterminate, changed, changedToMale, changedToFemale, unknown
     *
     * Values: male,female,indeterminate,changed,changedToMale,changedToFemale,unknown
     */
    enum class Gender(val value: kotlin.String) {
        male("male"),
        female("female"),
        indeterminate("indeterminate"),
        changed("changed"),
        changedToMale("changedToMale"),
        changedToFemale("changedToFemale"),
        unknown("unknown");
    }
    /**
     * the birth sex of the patient: male, female, indeterminate, unknown
     *
     * Values: male,female,indeterminate,changed,changedToMale,changedToFemale,unknown
     */
    enum class BirthSex(val value: kotlin.String) {
        male("male"),
        female("female"),
        indeterminate("indeterminate"),
        changed("changed"),
        changedToMale("changedToMale"),
        changedToFemale("changedToFemale"),
        unknown("unknown");
    }
    /**
     * any of `single`, `in_couple`, `married`, `separated`, `divorced`, `divorcing`, `widowed`, `widower`, `complicated`, `unknown`, `contract`, `other`.
     *
     * Values: single,inCouple,married,separated,divorced,divorcing,widowed,widower,complicated,unknown,`contract`,other,annulled,polygamous
     */
    enum class PersonalStatus(val value: kotlin.String) {
        single("single"),
        inCouple("in_couple"),
        married("married"),
        separated("separated"),
        divorced("divorced"),
        divorcing("divorcing"),
        widowed("widowed"),
        widower("widower"),
        complicated("complicated"),
        unknown("unknown"),
        `contract`("contract"),
        other("other"),
        annulled("annulled"),
        polygamous("polygamous");
    }
}

