/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models




/**
 * Contracts between the patient and the healthcare entity.
 *
 * @param kine
 * @param gp
 * @param ptd
 * @param nurse
 * @param noKine
 * @param noGp
 * @param noNurse
 * @param forcedSuspension
 * @param options
 * @param receipts
 * @param contractId
 * @param validFrom
 * @param validTo
 * @param mmNihii
 * @param hcpId
 * @param changeType
 * @param parentContractId
 * @param changedBy
 * @param startOfContract
 * @param startOfCoverage
 * @param endOfContract
 * @param endOfCoverage
 * @param unsubscriptionReasonId
 * @param ptdStart
 * @param ptdEnd
 * @param ptdLastInvoiced
 * @param startOfSuspension
 * @param endOfSuspension
 * @param suspensionReason
 * @param suspensionSource
 * @param signatureType
 * @param status
 * @param encryptedSelf The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys.
 */

data class MedicalHouseContractDto (

    
    val kine: kotlin.Boolean = false,

    
    val gp: kotlin.Boolean = false,

    
    val ptd: kotlin.Boolean = false,

    
    val nurse: kotlin.Boolean = false,

    
    val noKine: kotlin.Boolean = false,

    
    val noGp: kotlin.Boolean = false,

    
    val noNurse: kotlin.Boolean = false,

    
    val forcedSuspension: kotlin.Boolean = false,

    
    val options: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),

    
    val receipts: kotlin.collections.Map<kotlin.String, kotlin.String> = emptyMap(),

    
    val contractId: kotlin.String? = null,

    
    val validFrom: kotlin.Long? = null,

    
    val validTo: kotlin.Long? = null,

    
    val mmNihii: kotlin.String? = null,

    
    val hcpId: kotlin.String? = null,

    
    val changeType: MedicalHouseContractDto.ChangeType? = null,

    
    val parentContractId: kotlin.String? = null,

    
    val changedBy: kotlin.String? = null,

    
    val startOfContract: kotlin.Long? = null,

    
    val startOfCoverage: kotlin.Long? = null,

    
    val endOfContract: kotlin.Long? = null,

    
    val endOfCoverage: kotlin.Long? = null,

    
    val unsubscriptionReasonId: kotlin.Int? = null,

    
    val ptdStart: kotlin.Long? = null,

    
    val ptdEnd: kotlin.Long? = null,

    
    val ptdLastInvoiced: kotlin.Long? = null,

    
    val startOfSuspension: kotlin.Long? = null,

    
    val endOfSuspension: kotlin.Long? = null,

    
    val suspensionReason: MedicalHouseContractDto.SuspensionReason? = null,

    
    val suspensionSource: kotlin.String? = null,

    
    val signatureType: MedicalHouseContractDto.SignatureType? = null,

    
    val status: kotlin.Int? = null,

    /* The base64 encoded data of this object, formatted as JSON and encrypted in AES using the random master key from encryptionKeys. */
    
    val encryptedSelf: kotlin.String? = null

) {

    /**
     *
     *
     * Values: inscriptionStart,inscriptionEnd,suspension,coverageChange
     */
    enum class ChangeType(val value: kotlin.String) {
        inscriptionStart("inscriptionStart"),
        inscriptionEnd("inscriptionEnd"),
        suspension("suspension"),
        coverageChange("coverageChange");
    }
    /**
     *
     *
     * Values: notInsured,noReasonGiven,isHospitalized,outsideOfCountry,changeOfMutuality
     */
    enum class SuspensionReason(val value: kotlin.String) {
        notInsured("notInsured"),
        noReasonGiven("noReasonGiven"),
        isHospitalized("isHospitalized"),
        outsideOfCountry("outsideOfCountry"),
        changeOfMutuality("changeOfMutuality");
    }
    /**
     *
     *
     * Values: holderEid,holderPaper,legalrepresentativeEid,legalrepresentativePaper
     */
    enum class SignatureType(val value: kotlin.String) {
        holderEid("holderEid"),
        holderPaper("holderPaper"),
        legalrepresentativeEid("legalrepresentativeEid"),
        legalrepresentativePaper("legalrepresentativePaper");
    }
}

