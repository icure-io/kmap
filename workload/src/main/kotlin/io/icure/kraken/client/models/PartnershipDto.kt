/**
 * iCure Data Stack API Documentation
 *
 * The iCure Data Stack Application API is the native interface to iCure.
 *
 * The version of the OpenAPI document: v2
 *
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
package io.icure.kraken.client.models




/**
 * A relationship between this patient and another person.
 *
 * @param type Type of relationship.
 * @param status Status of the relationship.
 * @param partnerId UUID of the contact person or patient in this relationship.
 * @param meToOtherRelationshipDescription
 * @param otherToMeRelationshipDescription
 */

data class PartnershipDto (

    /* Type of relationship. */

    val type: PartnershipDto.Type? = null,

    /* Status of the relationship. */

    val status: PartnershipDto.Status? = null,

    /* UUID of the contact person or patient in this relationship. */

    val partnerId: kotlin.String? = null,


    @Deprecated(message = "This property is deprecated.")
    val meToOtherRelationshipDescription: kotlin.String? = null,


    @Deprecated(message = "This property is deprecated.")
    val otherToMeRelationshipDescription: kotlin.String? = null

) {

    /**
     * Type of relationship.
     *
     * Values: primaryContact,primaryContactFor,family,friend,counselor,contact,brother,brotherinlaw,child,daughter,employer,father,grandchild,grandparent,husband,lawyer,mother,neighbour,notary,partner,sister,sisterinlaw,son,spouse,stepdaughter,stepfather,stepmother,stepson,tutor,nextOfKin,federalAgency,insuranceCompany,stateAgency,unknown,seealso,refer
     */
    enum class Type(val value: kotlin.String) {
        primaryContact("primary_contact"),
        primaryContactFor("primary_contact_for"),
        family("family"),
        friend("friend"),
        counselor("counselor"),
        contact("contact"),
        brother("brother"),
        brotherinlaw("brotherinlaw"),
        child("child"),
        daughter("daughter"),
        employer("employer"),
        father("father"),
        grandchild("grandchild"),
        grandparent("grandparent"),
        husband("husband"),
        lawyer("lawyer"),
        mother("mother"),
        neighbour("neighbour"),
        notary("notary"),
        partner("partner"),
        sister("sister"),
        sisterinlaw("sisterinlaw"),
        son("son"),
        spouse("spouse"),
        stepdaughter("stepdaughter"),
        stepfather("stepfather"),
        stepmother("stepmother"),
        stepson("stepson"),
        tutor("tutor"),
        nextOfKin("next_of_kin"),
        federalAgency("federal_agency"),
        insuranceCompany("insurance_company"),
        stateAgency("state_agency"),
        unknown("unknown"),
        seealso("seealso"),
        refer("refer");
    }
    /**
     * Status of the relationship.
     *
     * Values: active,complicated,past
     */
    enum class Status(val value: kotlin.String) {
        active("active"),
        complicated("complicated"),
        past("past");
    }
}

